{"version":3,"sources":["index.js"],"names":["getRefsById","selector","daysRef","document","querySelector","hoursRef","minsRef","secsRef","CountdownTimer","constructor","targetDate","value","String","padStart","intervalId","count","time","days","pad","Math","floor","hours","mins","secs","textContent","clearInterval","timer","currentDate","Date","now","deltaTime","start","setInterval","myTimer"],"mappings":";;;AAsDE,aAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAtDF,QAAA,gBAEA,MAAMA,EAAcC,IAAa,CAC7BC,QAASC,SAASC,iBAAiBH,6BACnCI,SAAUF,SAASC,iBAAiBH,8BACpCK,QAASH,SAASC,iBAAiBH,6BACnCM,QAASJ,SAASC,iBAAiBH,+BAGrC,MAAMO,EACJC,aAAY,SAAER,EAAF,WAAYS,IAoClBC,EAAAA,KAAAA,MAAAA,GAASC,OAAOD,GAAOE,SAAS,EAAG,MAnClCZ,KAAAA,SAAWA,EACXS,KAAAA,WAAaA,EACbI,KAAAA,WAAa,KAGpBC,MAAMC,GACEC,MAAAA,EAAO,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QACnCK,EAAQ,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAC9DM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDO,EAAO,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MAEpDA,GAAAA,EAAO,EAAG,CACN,MAAA,QAAEd,EAAF,SAAWG,EAAX,QAAqBC,EAArB,QAA8BC,GAAYP,EAC9C,KAAKC,UAEPC,EAAQsB,YAAcP,EACtBZ,EAASmB,YAAcH,EACvBf,EAAQkB,YAAcF,EACtBf,EAAQiB,YAAcD,OACjBE,cAAc,KAAKX,YAG5BY,QACMC,IAAAA,EAAcC,KAAKC,MACjBC,MAAAA,EAAY,KAAKpB,WAAaiB,EAC/BZ,KAAAA,MAAMe,GAGbC,QACOL,KAAAA,QACAZ,KAAAA,WAAakB,YAAY,KACvBN,KAAAA,SACJ,MAMP,MAAMO,EAAU,IAAIzB,EAAe,CACjCP,SAAU,WACVS,WAAY,IAAIkB,KAAK,kBAGvBK,EAAQF","file":"src.f9ed41a3.js","sourceRoot":"../src","sourcesContent":["import './styles.css';\n\nconst getRefsById = selector => ({\n    daysRef: document.querySelector(`${selector} span[data-value=\"days\"]`),\n    hoursRef: document.querySelector(`${selector} span[data-value=\"hours\"]`),\n    minsRef: document.querySelector(`${selector} span[data-value=\"mins\"]`),\n    secsRef: document.querySelector(`${selector} span[data-value=\"secs\"]`),\n  });\n  \n  class CountdownTimer {\n    constructor({ selector, targetDate }) {\n      this.selector = selector;\n      this.targetDate = targetDate;\n      this.intervalId = null;\n    }\n  \n    count(time) {\n      const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),);\n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n      if (time > 0) {\n        const { daysRef, hoursRef, minsRef, secsRef } = getRefsById(\n          this.selector,\n        );\n        daysRef.textContent = days;\n        hoursRef.textContent = hours;\n        minsRef.textContent = mins;\n        secsRef.textContent = secs;\n      } else clearInterval(this.intervalId);\n    }\n  \n    timer() {\n      let currentDate = Date.now();\n      const deltaTime = this.targetDate - currentDate;\n      this.count(deltaTime);\n    }\n  \n    start() {\n      this.timer();\n      this.intervalId = setInterval(() => {\n        this.timer();\n      }, 1000);\n    }\n  \n    pad = value => String(value).padStart(2, '0');\n  }\n  \n  const myTimer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Sep 25, 2025'),\n  });\n  \n  myTimer.start();\n\n\n\n"]}